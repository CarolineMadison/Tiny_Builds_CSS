

:root {
    --border-width: 1.2vmin;
    --depth: 20vmin;
    --stack-height: 6vmin;
    --scene-size: 20vmin;
    /* --ring-size: calc(var(--scene-size) * 0.6); */
    --plane: radial-gradient(rgb(0 0 0 / 0.1) 50%, transparent 65%);
    --ring-shadow: rgb(0 0 0 / 0.5);
    --hue-one: 320;
    --hue-two: 210;
    --blur: 10px;
    --speed: 1.2s;
    --bg: #fafafa;
    --ring-filter: brightness(1) drop-shadow(0 0 0 var(--accent));
    --ring-percentage: 0.6;
    --ring-size: calc(var(--scene-size) * var(--ring-percentage));
    --ring-transform:
        calc(100% + (var(--scene-size) * ((1 - var(--ring-percentage)) * 0.5))) 50%;
}


* {
    box-sizing: border-box;
    transform-style: preserve-3d;
}

body {
    height: 100vh;
    display: grid;
    place-content: center;
    background: black;
}


.container {
    /* Define the scene's dimensions */
    height: var(--scene-size);
    width: var(--scene-size);
    /* Add depth to the scene */
    transform:
        translate3d(0, 0, 100vmin) rotateX(-24deg) rotateY(32deg) rotateX(90deg) translateZ(calc((var(--depth) + var(--stack-height)) * -1)) rotate(0deg);
}

.scene,
.plane {
    /* Ensure our container take up the full .container */
    height: 100%;
    width: 100%;
    position: relative;
}

.scene {
    /* Color is arbitrary */
    background: rgb(162 25 230 / 0.25);
}

.plane {
    /* Color is arbitrary */
    background: rgb(25 161 230 / 0.25);
    /* Overrides the previous selector */
    transform: translateZ(var(--depth));
}

.ring {
    --origin-z:
        calc(var(--stack-height) - (var(--stack-height) / var(--ring-count)) * var(--index));
    --hue: calc((360 / var(--ring-count)) * var(--index));
    --accent: hsl(var(--hue) 100% 55%);
    height: var(--ring-size);
    width: var(--ring-size);
    border-radius: 50%;
    border: var(--border-width) solid var(--accent);
    position: absolute;
    top: 50%;
    left: 50%;
    --destination-z: calc(((var(--depth) + var(--origin-z)) - (var(--stack-height) - var(--origin-z))) * -1);
    transform-origin: var(--ring-transform);
    transform:
        translate3d(-50%, -50%, var(--origin-z)) translateZ(calc(var(--destination-z) * var(--flipped, 0))) rotateY(calc(var(--flipped, 0) * 180deg));
    animation-name: slink;
    animation-duration: 2s;
    animation-fill-mode: both;
    animation-iteration-count: infinite;
    animation-delay: calc(var(--index) * 0.1s);
}

.ring:nth-of-type(odd) {
    --hue: var(--hue-two);
}


@keyframes slink {

    0%,
    5% {
        transform:
            translate3d(-50%, -50%, var(--origin-z)) translateZ(0) rotateY(0deg);
    }

    25% {
        transform:
            translate3d(-50%, -50%, var(--origin-z)) translateZ(0) rotateY(180deg);
    }

    45%,
    100% {
        transform:
            translate3d(-50%, -50%, var(--origin-z)) translateZ(var(--destination-z)) rotateY(180deg);
    }
}

  .box {
    animation: spin 2s infinite;
  }
  
  .box:nth-of-type(2) {
    animation-direction: reverse;
  }
  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }

  @keyframes box-one {
    50%, 100% {
      transform: rotate(360deg);
    }
  }
  @keyframes box-two {
    0%, 50% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }

  @keyframes slink-0 {
    0%, 4.5% {
      transform:
        translate3d(-50%, -50%, var(--origin-z))
        translateZ(0)
        rotateY(0deg);
    }
    38.25% {
      transform:
        translate3d(-50%, -50%, var(--origin-z))
        translateZ(0)
        rotateY(180deg);
    }
    49.5%, 100% {
      transform:
        translate3d(-50%, -50%, var(--origin-z))
        translateZ(var(--destination-z))
        rotateY(180deg);
    }
  }
  @keyframes slink-1 {
    0%, 9% {
      transform:
        translate3d(-50%, -50%, var(--origin-z))
        translateZ(0)
        rotateY(0deg);
    }
    42.75% {
      transform:
        translate3d(-50%, -50%, var(--origin-z))
        translateZ(0)
        rotateY(180deg);
    }
    54%, 100% {
      transform:
         translate3d(-50%, -50%, var(--origin-z))
         translateZ(var(--destination-z))
         rotateY(180deg);
    }
  }

  .scene {
    animation: step-up var(--speed) infinite linear both;
  }
  
  @keyframes step-up {
    to {
      transform: translate3d(-100%, 0, var(--depth));
    }
  }
  